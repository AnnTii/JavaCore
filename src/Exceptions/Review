1) Что такое исключение.
это событие, которое возникает во время выполнения программы и прерывает нормальный поток выполнения инструкций.
try – оборачиваемый код, который бросает исключение.
catch – ловим исключение.
finally – блок выполняемый всегда (почти).
throw – слово, кидающее исключение.
throws – слово, пробрасывающее исключение (прописывается в сигнатуре метода).
2) Иерархия исключений.

(Object)- Throwable - Error и его подклассы,
Exception и его проверяемые подклассы
Runtime Exception и его непроверяемые подклассы
3) Как создать/бросить/поймать исключение.
создать класс, унаследовав его от класса Exception, определить конструктор
сгенерировать исключение используется ключевое слово throw
также в сигнатуре метода должно быть прописано ключевое слово throws и тип исключения, которое он может выбросить
Для того, чтобы поймать исключение используется конструкция try … catch.
4) В чем разница между checked и unchecked исключениями.
проверяемые (checked) - класс Exception, но не Runtime. Это исключения которые проверяются во время компиляции кода.
Должны обрабатываться при помощи try catch или описываться в сигнатуре метода
непроверяемые (unchecked) - классы расширяющие Runtime Exception и Error. Проверяются во время выполнения программы.
5) Что такое стектрейс. Какую информацию из него можно получить?
это отчёт о действиях во время выполнения программы.
это список методов которые были вызваны до момента, когда в программе произошло исключение
имя пакета-имя класса-имя метода - исключение

6) блок finaly
это специальный блок который употребляется после конструкции try catch и выполняется не зависимо передано было исключение или нет.
- даже если в try имеется возвращение из метода (return)
- можно также перебить return вызванный в блоке catch, если использовать return в finally
- finally не вызывается если мы выходим из программы exit ()
7) Конструкция try-catch-with-resource.
Позволяет нам объявлять ресурсы которые будут использованы в блоке try, с гарантией что все ресурсы будут закрыты после выполнения блока.
Ресурсы должны реализовывать интерфейс AutoCloseable
9) Try с ресурсами: что если исключение вылетело сначала в try, а потом в close в конструкции try-with-recources? Какое исключение вылетит? Что будет с другим?
Если исключение будет выброшено в основном коде и в методе close(), то приоритетнее будет первое исключение,
а второе исключение будет подавлено, но информация о нем сохранится (с помощью метода Throwable.addSuppressed(Throwable exception), который вызывается неявно Java компилятором)
10) Какую информацию можно получить из StackTraceElement?
Пакет, имя класса, полный путь методов
11) Если в try с ресурсами, - в try не вылетало исключений, а при закрытии ресурсов возникло исключение?

Ресурс не закроется, а программа аварийно завершится с выводом StackTrace
12) Зачем нужны исключения?
Чтобы уведомить пользователя/разработчика о том, что произошла непредвиденная ситуация, на которую необходимо отреагировать.
13) Можно ли указывать в сигнатуре метода throws unchecked исключения?
Unchecked можно добавить, но не обязательно, перехватывать не обязательно даже если указана в throws.
Checked требуется указывать в сигнатуре метода в разделе throws ; перехватывать или добавлять в throws в вызывающем его методе.
14) Порядок создания (инициализации) ресурсов в try-resource?
Ресурсы инициализируются в порядке слева-направо. Если не удается инициализировать ресурс (то есть его выражение
инициализатора бросает исключение), то все ресурсы инициализированные до сих пор оператором try-with-resources закрываются.
Если все ресурсы инициализировать успешно, то блок try выполняет как нормально и тогда все не-null ресурсы оператора try-with-resources закрываются.



15) Чем отличаются исключения от обычных классов?
Классы-ошибки, расширяющие класс Error, свидетельствуют о возникновении сложных ситуаций в виртуальной машине Java. ...
Имена классов-ошибок, по соглашению, заканчиваются словом Error. Классы-исключения, расширяющие класс Exception, отмечают
возникновение обычной нештатной ситуации, которую можно и даже нужно обработать.
16) Все ключевые слова и всё что с ними связано.
try – оборачиваемый код, который бросает исключение.
catch – ловим исключение.
finally – блок выполняемый всегда (почти).
throw – слово, кидающее исключение.
throws – слово, пробрасывающее исключение (прописывается в сигнатуре метода).
17) Все исключения и как генерировать различные виды исключений.
Проверяемые исключения Сhecked.
- ClassNotFoundException – класс не найден.
- CloneNotSupportedException – попытка клонировать объект из класса, который не реализует интерфейс Cloneable.
- IllegalAccessException – запрещен доступ к классу.
- InstantiationException – попытка создать объект абстрактного класса или интерфейса.
- InterruptedException – один поток выполнения прерван другим потоком.
- NoSuchFieldException – запрашиваемое поле не существует.
- NoSuchMethodException – запрашиваемый метод не существует.
- ReflectiveOperationException – суперкласс исключений, связанных с рефлексией.

Непроверяемых исключений Unchecked
- ArithmeticException возникает при делении на ноль.
- ArrayIndexOutOfBoundsException возникает при попытке обратиться к ячейке за пределами массива.
- ArrayStoreException – присваивание элементу массива объекта несовместимого типа;
- ClassCastException – неправильное приведение типов;
- EnumConstantNotPresent – попытка воспользоваться неопределенным значением перечисления;
- IllegalArgumentException – недопустимый аргумент при вызове метода;
- IllegalMonitorStateException – недопустимая контрольная операция;
- IllegalStateException – неверное состояние среды или приложения;
- IllegalThreadStateException – несовместимость запрашиваемой операции с текущим состоянием потока выполнения;
- IndexOutOfBoundsException – выход индекса некоторого типа за допустимые границы;
- NegativeArraySizeException – создание массива отрицательного размера;
- NullPointerException – неправильное использование пустой ссылки;
- NumberFormatException – неправильное преобразование символьной строки в числовой формат;
- SecurityException – попытка нарушения безопасности;

Генерировать исключение throw new ()
можно в методе и этот метод может объявить, что он кидает исключения определенного класса, после списка аргументов
(в скобках) пишется ключевое слово throws и через запятую перечисляются классы исключений, который может порождать данный метод.
getMessage() возвращает сообщение об исключении
getStackTrace() возвращает массив, содержащий трассировку стека исключения
printStackTrace() отображает трассировку стека
18) Можно ли обрабатывать разные исключения в одном блоке catch?
Да, если catch блок обрабатывает несколько исключений, мы можем разделить их с помощью разделителя (|)(или).
При использовании этого подхода, генерируется меньший байт-код и уменьшается избыточность кода.
если мы ловим несколько исключений, одно из которых является предком первого. То мы должны оставить только предка, иначе компилятор будет ругаться.
19) Обязателен ли блок finally? А catch?
try может быть в паре с finally, без catch. Работает это точно так же - после выхода из блока try выполняется блок finally.
20) Когда будет выполнен finally? Когда не будет выполнен(4 случая)? Будет ли выполнен finally при Error?
Всегда (кроме падения JVM из-за серьёзной ошибки в блоке try{}, или отключении питания)
Единственные случаи, когда finally не будут вызваны:
1. Если вызывается System.exit()
2. Бесконечный цикл в блоке try
3. Завершился поток, где прописан finally
4. Краш JVM
Finally при Error не будет выполнен.
21) Разница try catch и if
Исключения позволяют избежать написания сложного кода. Они должны использоваться для локализации исключительного поведения,
связанного с неожиданной ошибкой. Они не должны служить заменой проверкам выполнения условий.
22) Какой return вернется? Из try или finaly?
return в блоке finally перекрывает первый

23) Что если в конструкции try finally вылетело исключение сначала в try а потом в finally? Какое исключение вылетит? Что будет с другим?

Если было выброшено два исключения – одно в try, второе в finally, то исключение в finally “проглотит” (перезапишет) исключение из try {} .
Если до блока finally исключение было обработано в catch, то мы можем получить информацию об исключении в блоке try и тем самым не потеряем исключение.

24) Расскажи про информацию, которая находится внутри исключения? Как с ней работать?

Исключение содержит в себе stacktrace(стектрейс вызовов), т.е. последовательность вызванных методов, а также номер строки, на которой возникла ошибка.

25) Что возвращает getStackTrace()?

getStackTrace() возвращает массив объектов класса StackTraceElement.
Массив содержит поэлементную трассировку стека.
Очень полезно оставлять в catch метод printStackTrace() (Выдача в поток, полной информации о точке возникновения исключения)

26) Какое правило должно соблюдаться при использовании нескольких блоков catch (с одним try)?

От меньшего к большему. Первыми должны ловиться наименьшие в иерархии исключения. Иначе будут «недостижимые» исключения, которые никогда не будут выполнены программой.

27) Где возможно вызывать исключения? Конструкция try-finally? Можно ли обрабатывать разные исключения в одном блоке catch?

В классе, методе, в любом блоке try-catch-finally.
Инструкция Finally гарантированно выполнится, абсолютно независимо оттого, что произойдет в предложении Try. Однако, предложение Finally фактически не обрабатывает никаких исключений.
Можно через знак | (или).

28) Какое правило должно соблюдаться при попытке поймать несколько исключений в одном catch?

если мы ловим несколько исключений, одно из которых является предком первого. То мы должны оставить только предка,
иначе компилятор будет ругаться. Исключения прописываются через разделитель |.

29) Зачем создавать свой класс и наследовать его от Exception?

Для создания СОБСТВЕННЫХ проверяемых исключенительных ситуаций, которые не предусмотрены JVM или компилятором и последующей обработки этих ситуаций.

30) Что такое ошибка, а что такое исключительная ситуация?

Исключительная ситуация – ситуация которую мы можем предсказать и обработать.
Ошибка возникает на уровне JVM и не может быть обработана программистом (закончилась память в компьютере или переполнен стек – и взять её неоткуда, поэтому и обрабатывать смысла нет)

31) Что нужно делать программисту, если в коде происходит деление на ноль?

это ошибка кода, которую программист должен убрать. Или убрать деление на 0 или добавить проверочное условие. (/ by zero)





32) От каких классов Throwable и его подклассов нельзя наследоваться?

Технически от класса Error наследоваться не принято, т.к. это ошибки JVM (серьезные ошибки, которые программист итак обработать не может)

33) Какую информацию можно получить из StackTraceElement?

Информация о текущем состоянии «стека вызовов функций» Когда одна функция вызывает другую, Java-машина помещает в
этот стек новый элемент StackTraceElement. Когда функция завершается этот элемент удаляется из стека.

34) Можно ли так написать try { throw new Object(); }?

Это будет ошибкой, т.к. Object не является исключением, хотя и является родителем Throwable. Вся работа с исключениями начинается с класса Throwable.

35) В чём разница между проверяемыми исключениями и непроверяемыми?

Checked (проверяемые исключение) мы должны или обработать с помощью try/catch или пробросить дальше добавлением в сигнатуру throws.
Unchecked (непроверямые) ни обрабатывать ни делать что-либо ещё не нужно. Вызваны проблемами, которые не могут быть решены, такими как деление на 0, нулевой указатель и т.д.

36) В чём разница с точки зрения синтаксиса и идеологическая при использовании?

можно ловить и checked и unchecked, но ловить unchecked не нужно. И обрабатывать собственно нужно только checked исключения.
Unchecked исключения не Error, но RunTimeException это больше ошибка кода (программиста), которую нужно исправить

37) Какое назначение класса Throwable?

Класс Throwable базовый для всех стандартных классов исключений Java. Этот класс предоставляет ряд методов, которые можно
использовать или переопределять в собственных классах обработки исключений. Эти классы должны быть унаследованы от класса Exception, который унаследован от класса Throwable

38) Какое назначение класса Throwable? Методы класса Throwable?

класс предоставляет ряд методов, которые можно использовать или переопределять в собственных классах обработки исключений.
Эти классы должны быть унаследованы от класса Exception, который унаследован от класса Throwable

getCause() Возвращает исходную причину исключения
addSuppressed() Добавляет указанное исключение к исключениям, которые были подавлены для того чтобы доставить это исключение
getMessage() Полное сообщение о исключении,
printStackTrace() полной информации о точке возникновения исключения,
getSuppressed() Подавленное исключение появится в информации о стеке сгенерированного исключения, и эти исключения также можно получить с помощью метода


39) Что происходит если не обработать исключение?

Поток, в котором было выброшено и не обработано исключение, остановится, и распечатает стектрейс в вывод System.

40) Что такое подавленные исключения?

Подавленные исключения -это дополнительные исключения, которые возникают в операторе try-with-resources при закрытии ресурсов
AutoCloseable. Поскольку при закрытии ресурсов AutoCloseable может возникнуть несколько исключений, дополнительные исключения
присоединяются к основному исключению как подавленные исключения .

41) Как достать подавленное исключение?
Можем получить эти подавленные исключения, вызвав метод Throwable.getSuppressed из исключения, созданного блоком try.

42) Что такое ресурс в конструкции try-with-resources?

Она дает возможность объявлять один или несколько ресурсов в блоке try, которые будут закрыты автоматически без использования
finally блока. В качестве ресурса можно использовать любой объект, класс которого реализует интерфейс java.lang.AutoCloseable или java.io.Closable.

43) Что если исключение вылетело сначала в try, а потом в close в конструкции try-with-recources? Какое исключение вылетит? Что будет с другим?

Если исключение будет выброшено в основном коде и в методе close(), то приоритетнее будет первое исключение, а второе исключение
будет подавлено, но информация о нем сохранится (с помощью метода Throwable.addSuppressed(Throwable exception), который вызывается неявно Java компилятором

44) Когда происходит закрытие ресурса в конструкции try-with-resources если в try возникло исключение: до перехода в catch или после того как catch отработает? –

Ресурс - это объект, который должен быть закрыт после завершения работы программы. Оператор try-with-resources обеспечивает закрытие каждого ресурса в конце оператора.

45) Какие есть уровни логирования и для чего они нужны?

SEVERE (ошибка)
WARNING (предупреждение)
INFO (информационное сообщение)
CONFIG
FINE (сообщение об успешной операции)
FINER
FINEST
В логгере есть ещё Форматтер (Formatter), Хэндлер (Handler)
Логгирование позволяет ответить на вопросы, что происходило, когда и при каких обстоятельствах. Без логов сложно понять,
из-за чего появляется ошибка, если она возникает периодически и только при определенных условиях

46) Обязательно ли передавать в метод getLogger() имя класса? Почему так принято?

Logger.getLogger создает один регистратор на класс, а не один регистратор на экземпляр класса. Logger.getLogger(Class) является
сокращением для getLogger(clazz.getName()). Соглашение, используемое с log4j и другими фреймворками регистрации, - это определение
статического регистратора для каждого класса. Причины, по которой многие люди используют тип класса: Прост в использовании.
Нам не нужно беспокоиться о дублировании имен Легко проверить класс ведения журнала, так как имя журнала будет отображаться в
файле журнала Когда вы распространяете свой класс, люди могут захотеть перенаправить ведение журнала из вашего класса в конкретный файл или в другое место

47) Сообщения каких уровней мы увидим, задав уровень INFO?
все, что выше INFO – Info/ Warning, Severe

48) Как Java понимает какой уровень главнее при установке .setLevel().

Метод setLevel(), как и в объектах регистратора, определяет наименьшую степень серьезности, которая будет отправлена в соответствующее место назначения.

49) Почему существует два метода setLevel()?

Уровень, установленный в регистраторе, определяет, какую степень серьезности сообщений он будет передавать своим обработчикам.
Уровень, установленный в каждом обработчике, определяет, какие сообщения будет отправлять этот обработчик

package PrimitiveTypes;
/*
Вам дан список ролей и сценарий пьесы в виде массива строчек. Каждая строчка сценария пьесы дана в следующем виде:
Роль: текст
Текст может содержать любые символы.
Напишите метод, который будет группировать строчки по ролям, пронумеровывать их и возвращать результат в виде готового текста (см. пример). Каждая группа распечатывается в следующем виде:

Роль:
i) текст
j) текст2
...
==перевод строки==

i и j -- номера строк в сценарии. Индексация строчек начинается с единицы, выводить группы следует в соответствии с порядком ролей. Переводы строк между группами обязательны, переводы строк в конце текста не учитываются.

Заметим, что вам предстоит обработка огромной пьесы в 50 000 строк для 10 ролей – соответственно, неправильная сборка результирующей строчки может выйти за ограничение по времени.

Обратите внимание еще на несколько нюансов:
имя персонажа может встречаться в строке более одного раза, в том числе с двоеточием;
название одной роли может быть префиксом названия другой роли (например, "Лука" и "Лука Лукич");
роль, у которой нет реплик, тоже должна присутствовать в выходном файле;
в качестве перевода строки надо использовать символ '\n' (перевод строки в стиле UNIX);
будьте внимательны, не добавляйте лишних пробелов в конце строк.

Требования:
1. Метод должен быть публичным.
2. Метод должен принимать на вход два массива строк.
3. Метод должен возвращать строку.
4. Результативная строка должна соответствовать уcловию.
5. Необходимо использовать StringBuilder
 */

/*
Если ты думаешь: как решить эту задачу?
1. Работать надо через СтрингБилдер, поэтому первым делом создай его.
2. Начать надо с "вписания" роли в твой созданный СтрингБилдер.
2.1. Помещай(через append) туда элементы массива role(с прибавлением ":" и '/n') через цикл.
3. После "вписания" роли в СтрингБилдер создавай вложенный цикл, где будут проверяться совпдения элементов второго массива textLine с "вписанными" элементами первого массива(через startsWith).
4. В случае совпадения( через if) помещай элемент второго массива в СтрингБилдер с заменой(через replaceFirst)  роли(так как во втором массиве уже есть название роли).
Сложновато получилось, но задача мозговыносная.
 */

public class JavaCore_2_4_18 {
    public static void main(String[] args) {
        String[] roles = new String[]{
                "Городничий",
                "Аммос Федорович",
                "Артемий Филиппович",
                "Лука",
                "Лука Лукич",
                "Без имени"
        };
        String[] textLines = new String[]{
                "Городничий: Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.",
                "Аммос Федорович: Как ревизор?",
                "Артемий Филиппович: Как ревизор?",
                "Городничий: Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.",
                "Аммос Федорович: Вот те на!",
                "Артемий Филиппович: Вот не было заботы, так подай!",
                "Лука Лукич: Господи боже! еще и с секретным предписаньем!",
                "Лука: Господи боже! Я уронил своё пасхальное яйцо от неожиданности!"
        };

        System.out.println(printTextPerRole(roles,textLines));

    }

    public static String printTextPerRole(String[] roles, String[] textLines) {
        StringBuilder answer = new StringBuilder();

        for (int i = 0; i < roles.length; i++) {
            answer.append(roles[i] + ":\n");

            for (int j = 0; j < textLines.length; j++){

                if (textLines[j].startsWith(roles[i] + ":")) {
                    answer.append((textLines[j].replaceFirst(roles[i] + ":", j + 1 + ")")) + "\n");
                }
            }
            answer.append('\n');
        }
        return String.valueOf(answer);
    }
}

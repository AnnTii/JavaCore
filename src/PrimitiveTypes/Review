

Перед ревью, проверьте себя по контрольным вопросам:

1) Какие примитивные типы есть в Java

2) Что такое явные и неявные приведения, с чем связано их наличие?

3) Какие данные мы рискуем потерять при явных приведениях?

4) StringBuilder.

5) Логические операторы.

6) char

7) Неизменяемые типы

-----------------------------------------------------------------------

- Какие примитивные типы есть в Java?
byte (1 byte), short (2 bytes), int (4 bytes), long (8 bytes) float (4 bytes), double (8 bytes) char (2 bytes)
boolean (4 byte or less)

- Размерность примитивных типов?
byte -128..127 short -2^15..(2^15-1) int -2^31..(2^31-1) long -2^63..(2^63-1) float -3.4Е38..3.4Е38
(примерно от -2^128 до 2^128) double -1.7E308..1.7E308 (примерно от -2^1024 до 2^1024) char 0…65535 boolean [true, false]

- Что такое литерал?
запись представляющая фиксированное значение в исходном коде (число, строка, null, true, false и тд)
литерал для long должен оканчиваться на L или l литерал для float должен оканчиваться на F или f числовой
литерал может иметь подчёркивания для удобства числовой литерал можно записывать в «научном» формате: -1.0Е-1
числовой литерал можно записать в двоичном виде: 0b01010 или 0B01010 числовой литерал можно записать в восьмеричном
виде: 0777 (все цифры меньше 8) числовой литерал можно записать в шестнадцатиричном виде: 0х5A или 0Х5а числовой
литерал можно записать в виде: 0xA3p33 или 0Xa3P33, где часть перед р это мантисса в шестнадцатиричном виде,
а после р экспонента в десятичном виде

- Что такое явные и неявные приведения, с чем связано их наличие?
разные типы данных занимают разное место в памяти и/или по разному интерпретируют это место явное приведение - это
когда проггер даёт прямое указание привести один тип к другому, типа он знает что делает автоматические преобразования
происходят автоматически, причём char, byte и short становятся int автоматические преобразования без потери точности:
byte -> int short -> int char -> int int -> long int -> double float -> double автоматические преобразования с возможной
потерей точности: int -> float (из-за того, что значимая часть int 31 бит, а мантисса у float только 24 бита)
long -> float (из-за того, что значимая часть long 63 бита, а мантисса у float только 24 бита) long -> double (из-за
того, что значимая часть long 63 бита, а мантисса у double только 53 бита) при операциях используются следующие правила:
если один из операндов double, то все остальные приводятся к double если не предыдущее, то если один из операндов float,
то все остальные приводятся к float если не предыдущее, то если один из операндов long, то все остальные приводятся к
long иначе всё приводится к int, даже если ни один из операндов не является int

- Какие данные мы рискуем потерять при явных приведениях?
младшие разряды при автоматических преобразованиях всё что не помещается в меньший тип (пример, преобразование
float —> int: если float > max int, то будет max int)

- Разница между String, StringBuilder и StringBuffer?
String - это иммутабельный объект, то есть его нельзя изменить, и про каком-либо изменении строки происходит создание
новой (через StringBuilder) StringBuilder и StringBuffer позволяют изменять строку, различие между ними в том, что
StringBuffer потокобезопасный, но медленнее StringBuilder имеет четыре конструктора: по умолчанию резервируется память
на 16 символов (char) при передаче числа (int) резервируется память на указанное количество символов при передаче String
или CharSequence сохраняется переданное + место под 16 символов

- Как добавить String’у в pool строк?
Надо вызвать метод intern()

- Какие классы-обертки знаешь?
Byte Short Integer Long Float Double Character Boolean

- Что такое autoboxing, unboxing и когда они происходят автоматически?
autoboxing создание класса-обёртки при присвоении или передаче примитива там, где ожидается объект unboxing
использование примитива вместо класса-обёртки при сравнениях, присвоении или передаче объекта класса-обёртки unboxing
не происходит при перегрузке метода и при операциях == и !=, так как здесь происходит сравнение по ссылке, а не по
значениею autoboxing и unboxing не работает для массивов Pool примитивов Пул - место в памяти, отведённой под «кучу»,
для хранения неизменяемых объектов Примитивные типы и ссылки на объекты хранятся в стеке, но при неявном создании
обёртки Integer числа от -128 до 127 хранятся в пуле Неизменяемые типы все классы-обёртки String BigDecimal & BigInteger
все объекты класса java.lang.StackTraceElement Логические операторы I логическое ИЛИ || условное ИЛИ & логическое И &&
условное И ^ исключающее ИЛИ ! логическое отрицание приоритет операторов: ! -> & -> ^ -> | -> && -> || Отличие
операторов сокращенных логических операторов и полных сокращённые операторы «ленивые», то есть если первый операнд в
ИЛИ true, то второй операнд не вычисляется. Аналогично с false для И Оператор XOR. Представить таблицу истинности для
него если оба операнда true или оба false, то выражение false, иначе true. Общее правило простое: если в строке (среди
набора операндов) нечётное число единиц (true), то результат true, иначе false. A B XOR(A, B) 0 0 0 0 1 1 1 0 1 1 1 0

- Что такое char? Почему над ним можно выполнять арифметические операции?
это кодировка для Unicode символов, но по исполнению это беззнаковое целое от 0 до 65535, поэтому над ним можно
выполнять арифметические операции Какая размерность у boolean формально достаточно 1 бита, но есть нюанс. В случае
одиночного значения его размер обычно равен размеру int, в массивах обычно равен 1 byte. Но в некоторых реализациях
в особых случаях может быть реально 1 бит Размер boolean-значений в массиве типов boolean Обычно 1 байт

- Какие есть циклы в Java? Чем отличаются друг от друга?
while, do while, for, foreach while просто цикл продолжающийся пока истинно условие do while цикл в котором тело цикла
выполнится хотя бы один раз for содержит объявление счётчика, условие завершение и изменение счётчика foreach
сокращённая версия for для обхода массива Условные операторы if-else switch-case тернарный оператор ( ? : )

- Что такое continue и break?
это изменение порядка выполнения цикла continue обеспечивает переход к следующей итерации break осуществляет досрочное
прекращение цикла break при помощи метки позволяет сразу выходить из глубоких циклов без последовательных брейков
с флагами

- Что такое рекурсия? Недостатки и преимущества?
вызов функции самой себя при прямой рекурсии. Или когда функции попеременно вызывают друг друга при косвенной
преимущество в том, что некоторые задачи типа обхода дерева проще выразить через рекурсию недостаток в малой глубине
стека (около 1000 вызовов, если функция небольшая) и накладных расходах на вызов метода

- 2 случая (правила/условия) в рекурсивном алгоритме?
первое условие определяет остановку алгоритма второе условие определяет следующий вызов

- Что такое массив и какие на нём есть ограничения?
набор однотипных значений доступ осуществляется по индексу. Первый элемент нулевой, далее первый, второй и так далее
все данные должны быть одного типа выходить за пределы массива нельзя изменять размер массива после объявления нельзя
для массивов не «работает» сравнение equals, надо использовать Array.equals для одномерных или Array.deepEquals
для многомерных

- Какая максимальная длина массива?
зависит от реализации, обычно чуть меньше положительной части int Максимальная размерность многомерного массива 255
Переведи число X (любое) из десятичной в двоичную, и число Y (любое) из двоичной в десятичную из двоичной в десятичную:
последовательно умножать единицу на 2 в степени, соответствующей позиции этой единицы справа. Самая правая позиция
нулевая из десятичной в двоичную: последовательное деление на 2, если есть остаток, то записывается 1, если нет то 0
Инкременты, декременты, отличия инкремент увеличивает переменную на 1, а декремент уменьшает при префиксной записи
переменная сначала изменяется, а потом используется при постфиксной записи переменная сначала используется,
а потом изменяется

- Почему 0.1 + 0.7 != 0.8?
потому, что double основан на двоичной системе и десятичные дроби хранит в приблизительном виде. Поэтому при
вычислениях в хвостах могут накапливаться «ошибки»

- Где находятся параметры и аргументы метода?
говорят, что это синонимы аргументы находятся внутри круглых скобок после имени функции при вызове функции параметры
тоже находятся внутри круглых скобок после имени функции, но при объявлении функции

- Чем отличается метод от функции?
функция это часть программы (подпрограмма), которая выполняет какие-либо операции и возвращает значение. Может быть
вызвана любое количество раз метод это функция, «привязанная» к классу, то есть которая принадлежит классу или его
экземпляру Сигнатура метода это имя метода плюс параметры (причем порядок параметров имеет значение). В сигнатуру
метода не входит возвращаемое значение, а также бросаемые им исключения Конткракт метода это сигнатура плюс тип
возвращаемого значения и исключениями

- При сложении char short какой результирующий тип получим?
int, потому что char и short автоматически расширятся до int.

-----------------------------------------------------------------------

12 задач

Перед ревью, проверьте себя по контрольным вопросам:
1) Какие примитивные типы есть в Java:
целые типы: byte 8 бит, short 16 бит, int 32, long 64, char 16; вещественные типы: float 32, double 64;  boolean.

2) Что такое явные и неявные приведения, с чем связано их наличие?
явное преобразование - это когда бОльший тип данных помещается в мЕньший, нужно явно прописывать приводимый тип в скобках
неявное - это автоматическое преобразование, когда тип расширяется, мЕньший тип кладется в бОльший тип
наличие связано с типизацией языка

3) Какие данные мы рискуем потерять при явных приведениях?
происходит усечение значения, например если int 258 станет байтом то его значение будет 2

1. Почему 0.1 + 0.7 != 0.8 ?
Это объясняется разностью в точности представления вещественных чисел в типах double и float в двоичном формате
(вспоминаем, что компьютер работает только с нулями и единицами :)
http://pr0java.blogspot.com/2015/04/blog-post_15.html

2. byte a = 1; byte b = 2; byte c = a + b; Будут ли какие-то проблемы?
будут проблемы компиляции, надо явно привести к байту, потому что на выходе будет int


3. Расскажи про pool строк и pool примитивов:
String pool - это место в памяти, где хранятся разные объекты класса String. Если мы создаем стрингу без слова new,
java не гарантирует что создастся объект. Если в стрингпуле не строки которую мы создали, то создается новый объект.
Если мы создаем стрингу с таким же словом, то новый объект уже не создается, такой уже есть в стрингпуле и тогда новая
стринга с таким же словом просто начинает ссылаться на ранее созданный объект

String pool дает экономию памяти
Если на new String dspdfnm метод intern(), то java поместит этот объект в пул строк, а не в кучу для объектов.
цифры помещаются в стек, но есть оберточные типы Integer, Double и т.д. У них есть свой пул, размерностью их диапазона
(int максимальное 127) Если мы создадим Integer b=128 (уже не входит в диапазон пула Integer), тогда создастся
объект в куче
IntegerCash (размер пула)

4. Что такое рекурсия? Недостатки и преимущества?
рекурсия - это когда метод вызывает сам себя.
недостатки: работает дольше, параметры этого метода копируются в стек. для рекурции надо больше памяти чем для итерации
достоинства: более читабельный алгоритм, подходит для реализации алгоритмов обхода списков

5. char + short = type?   = int

6. Максимальное количество вложенных массивов - 255

7. Максимальная длина массива (как размер положительной части int) - полностью зависит от JVM, может хранить в
массиве 2147483647 элементов ( 2 * 10^32)

8. Условные операторы - if-else, switch-case, тернарный оператор

9. Что будет, если попытаться присвоить нулевую обертку (ссылка null) обратно в примитив? не скомпилируется
Будет выброшено исключение.

10. Какая максимальная длина массива?
-Равна длинне Int (-2 147 483 648; +2 147 483 647)

11. Как добавить String’у в pool строк? - вот на такой я не смог ответить
Ответ: метод .intern();
Хорошая статья про явные и неявные приведения https://metanit.com/java/tutorial/2.2.php
Понравилась статья "Руководство по String pool в Java". Все разложено по полочкам.
https://topjava.ru/blog/rukovodstvo-po-string-pool-v-java
https://www.youtube.com/watch?v=UlU05lAShSY&t=1066s
Из того, что не перечислено:

12. Почему не рекомендуются множественные конкатенации String?
потому что время занимает и место
При использовании конкатенации выполняется несколько ненужных действий:
неявно вызывается Integer.toString(a) ;
выделяется StringBuffer для конкатенации, куда копируется пустая строка «» и переведённое в строку число
преобразовывается StringBuffer в строку

13. Размер boolean в памяти
32 бита, 4 байта
В стандартной реализации Sun JVM и Oracle HotSpot JVM тип boolean занимает 4 байта (32 бита), как и тип int.
Однако, в определенных версиях JVM имеются реализации, где в массиве boolean каждое значение занимает по 1-му биту
Размер Boolean переменной зависит от виртуальной машины.
Но там не все однозначно
https://ru.stackoverflow.com/questions/1016496/boolean-%d0%b8-%d1%80%d0%b0%d0%b7%d0%bc%d0%b5%d1%80-%d0%b2-%d0%bf%d0%b0%d0%bc%d1%8f%d1%82%d0%b8
Также, у меня не получилось создать массив int[] с количеством элементов Integer.MAX_VALUE. Heap слишком мал для этого
(16 Гб оперативки, win x64). Получилось только byte[] b = new byte[Integer.MAX_VALUE - 2]. Так что ограничение еще
и накладывает размер Heap.

14. Для чего нужен пул примитивов?
чтобы не создавать каждый раз объект и не занимать память в куче или в стеке

15. 2 случая (правила/условия) в рекурсивном алгоритме?
граничный случай или базис: когда функция перестает себя вызывать, например условие
там есть условие для выхода
рекурсивный случай или шаг: когда функция вызывает саму себя

16. какого типа данные получатся если сложить long и float
получится double

17. Потеря данных при преобразовании short/char?
byte автоматически не преобразуется в char хоть и меньше битов у него
так что short в char
byte и short знаковые типы, а char беззнаковый
потеряется знак, потому что char это один символ, а short например -3, потеряется знак минус

18. Autoboxing/Unboxing (автоупаковка/автораспаковка, что это такое)?
Autoboxing происходит:
1)При присвоении значения примитивного типа переменной соответствующего класса-обёртки.
2)При передаче примитивного типа в параметр метода, ожидающего соответствующий ему класс-обёртку.
Unboxing происходит:
1)При присвоении экземпляра класса-обёртки переменной соответствующего примитивного типа.
2)В выражениях, в которых один или оба аргумента являются экземплярами классов-обёрток (кроме операции == и !=).
3)При передаче объекта класса-обёртки в метод, ожидающий соответствующий примитивный тип.
при autoboxing создается новый объект расходуется память

19. Чем отличается метод от функции
Функция это самостоятельная сущность. Метод это часть класса(объекта) и без него не употребляется.

20. Побитовые операции
~	Побитовый унарный оператор NOT
&	Побитовый AND
&=	Побитовый AND с присваиванием
|	Побитовый OR
|=	Побитовый OR с присваиванием
^	Побитовый исключающее OR
^=	Побитовый исключающее OR с присваиванием
>>	Сдвиг вправо
>>=	Сдвиг вправо с присваиванием
>>>	Сдвиг вправо с заполнением нулями
<<	Сдвиг влево
<<=	Сдвиг влево с присваиванием
>>>=	Сдвиг вправо с заполнением нулями с присваиванием
http://developer.alexanderklimov.ru/android/java/bitwise.php

21) StringBuilder.
- https://javarush.ru/groups/posts/2351-znakomstvo-so-string-stringbuffer-i-stringbuilder-v-java
- https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html

22. Логические операторы.
Таблица логических операторов в Java
Оператор	Описание
&	Логическое AND (И)
&&	Сокращённое AND
|	Логическое OR (ИЛИ)
||	Сокращённое OR
^	Логическое XOR (исключающее OR (ИЛИ))
!	Логическое унарное NOT (НЕ)
&=	AND с присваиванием
|=	OR с присваиванием
^=	XOR с присваиванием
==	Равно
!=	Не равно
?:	Тернарный (троичный) условный оператор
Таблица. Результаты выполнения логических операторов
A	B	A | B	A & B	A ^ B	!A
false	false	false	false	false	true
true	false	true	false	true	false
false	true	true	false	true	true
true	true	true	true	false	false

23. Неизменяемые типы
final модификатор
Immutable-типы это неизменяемый класс String
Из того, что тебе железобетонно нужно запомнить уже сейчас — все классы-обертки над примитивными типами — неизменяемые.
Integer, Byte, Character, Short, Boolean, Long, Double, Float — все эти классы создают Immutable объекты. Сюда же
относятся и классы, используемые для создания больших чисел — BigInteger и BigDecimal.
Так вот: объекты класса java.lang.StackTraceElement тоже неизменяемые. Это логично: если бы кто-то мог изменять данные
нашего стэка, это могло бы свести на нет всю работу с ним. Представь, что кто-нибудь заходит в StackTrace и
меняет OutOfMemoryError на FileNotFoundException.

24. класс Void
Т.е. это как бы объект, указывающий на какой-то контейнер, в обычном виде на результат метода. Причем в рантайме, оО!

25. Примитивные типы данных и литералы. Объявление и инициализация переменных:

Литера - это число, символ или строка написанная нами после инициализации
char с = 'c'  c-литерал типа char
int s = 5;  5-литерал типа int

26. Инкременты, декременты, отличия?
++x, x++, --x, x--

27. StringBuilder и StringBuffer
В классе Стринг все методы не изменяют строку. Чтобы значение поменялось, надо перезаписать (переназначить)
строку с присвоением: String s = "Hello"
s = s.toUpperCase() - так можно (тут создался новый объект String уже большими буквами)
s.toUpperCase() - так нельзя
StringBuilder - изменяемый класс. При конкатенации не создается куча объектов, мы месяем существующий. Методом append()
StringBuilder работает быстрее StringBuffera
Builder потоконебезопасен
Buffer потокобезопасен синхронизирован

28. Форматирование строк в Java
System.out.printf("%f Hello %dw, %s,      3.22, 5, "World")
%s это место на которое будет вставляться World
%d - цифры интовые; %5d - пятизначное число = 50000
%f - вещественное число float например
\n бэкслэш н - переносит строку

29. String и его методы.
length() - возвращает длину строки
 indexOf() - позволяет искать строки в строках. Есть 4 вида таких методов
charAt() - возвращает символ стоящий на индексе
toCharArray() - возвращает массив всех символов строки
equals (Object o) - проверяет равны ли две строки по содержимому
trim() - удаляет пробелы вначале и вконце строки
concat() - объединяет строки
toLowerCase()
toUpperCase()
replace() - метод позволяет заменить символ в строке
replaceAll() - метод позволяет заменить слово в строке
subString() - извлекает символы из строки под индексами

30. Пример immutable класса
String

31. Что такое массив и какие на нём есть ограничения
Объект, в котором хранятся элементы.
 Размер массива (количество ячеек) нужно определять в int
Изменить длину массива после его создания нельзя.
Доступ к элементу массива можно получить по его индексу.
В массивах, как и везде в Java, элементы нумеруются с нуля.
После процедуры создания массива он наполнен значениями по умолчанию.

32. Какая максимальная длина массива
Максимальное количество элементов массива array равно (2^31)-1 или 2 147 483 647

33. Многомерные массивы
Это массив массивов. ограничение количества многомерных массивов (255).

34. Побитовые операции
Оператор XOR. Представить таблицу истинности для него
1 и 1 = 0
0 и 0 = 0
1 и 0 = 1

35.  преобразование из двоичной в десятичную и обратно :
https://www.youtube.com/watch?v=FGRlYjHfzSY
Особенно попробуйте 0.1 из 10-чной перевести в 2-ную и обратно:
https://calculatori.ru/perevod-chisel.html
Дробные числа в двоичной системе счисления:
https://www.youtube.com/watch?v=F5OkBuzvI5g
Перевод дробной части числа:
https://math.semestr.ru/inf/drob.php
Перевод 1111 в десятичную систему и обратно:

36. Представление вещественных чисел
Вещественные числа обычно представляются в виде чисел с плавающей запятой.
Содержит знак, порядок и мантису. Порядок - это также 'tcgjytynf или показатель степени.
http://neerc.ifmo.ru/wiki/index.php?title=%D0%9F%D1%80%D0%B5%D0%B4%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2%D0%B5%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D1%85_%D1%87%D0%B8%D1%81%D0%B5%D0%BB

37. Назовите все условные операторы?
if, if-else и switch-case
https://highload.today/uslovnye-operatory-java-kak-ispolzovat-if-if-else-i-switch-case/

38. Отличия for от for each?
Цикл for
Запомните: когда Вы заранее знаете сколько раз повторится одно и то же действие, -необходимо использовать цикл for.
Цикл for each - это разновидность цикла for
используется для перебора элементов массива или коллекции, но изначально создан для работы не с массивами, а с коллекциями
не может изменить значение элемента массива в ячейке! доступ только на чтение и математические операции. Не может
изменить потому, что в цикле for идет работа с каждой ячейкой, меняет значение каждый элемент массива, а цикле
for each идет работа с переменной, значение меняет только переменная, не ячейки
может изменить значения элементов (значения объектов) массива ссылочного типа данных, но заменить элемент не может
не может проводить динамическую инициализацию массива
не может в одном цикле одновременно работать более чем с одним массивом

39. Вопрос который был мне задан: что такое NaN?
NaN (англ. Not-a-Number) — одно из особых состояний числа с плавающей запятой.

40. размер примитивного типа boolean в разных ситуациях?
8 (в массивах), 32 (не в массивах используется int)

41. класс-обертка void...

42. Основной затык это почему 0.1 + 0.7 != 0.8.
"Подобные ошибки связанны с внутренним двоичным (binary) представлением чисел. Подобно тому, как в десятичной системе
нельзя точно представить результат деления 1/3, так и в двоичной системе невозможно точно представить 1/10. Проблемой
нормализованного представления является невозможность представления нуля. В нормализованной форме числа с плавающей
точкой невозможно представить ноль, поскольку нет такой степени двойки, которая равнялась бы нулю."

43. Переведи число X (любое) из десятичной в двоичную, и число Y (любое) из двоичной в десятичную;

44. Отличие операторов сокращенных логических операторов и полных
Оператор & - это побитовый оператор.

Почему над ним можно выполнять арифметические операции?
Какая размерность у boolean
Рзмер boolean-значенией в массиве типов boolean
Какие есть циклы в Java?
Чем отличаются друг от друга?
Что такое рекурсия?
Недостатки и преимущества?
2 случая (правила/условия) в рекурсивном алгоритме?
Какие классы-обертки знаешь?
Что такое Autoboxing, unboxing и когда они происходят автоматически?
Какая максимальная длина массива?
Что такое массив и какие на нём есть ограничения?
Максимальная размерность многомерного массива
Переведи число X (любое) из десятичной в двоичную, и число Y (любое) из двоичной в десятичную
Инкременты, декременты, отличия.
Почему 0.1 + 0.7 != 0.8 ?
Что такое continue и break?
Где находятся параметры и аргументы метода
Чем отличается метод от функции

1. Ограничение количества многомерных массивов - 255.
2. 2 условия рекурсии: выход из рекурсии и уменьшение шага.
3. Зачем нужны классы обертки - для того чтобы использовать методы классов оберток, у примитивов их нету.

1. Какая размерность у boolean?
2. Как добавить String’у в pool строк?
3. Какие есть циклы в Java? Чем отличаются друг от друга?
4. Что такое рекурсия? Недостатки и преимущества?

1. Какая размерность у boolean?
2. Переведи число X (любое) из десятичной в двоичную, и число Y (любое) из двоичной в десятичную
3. Какие классы-обертки знаешь?
4. Расскажи про pool строк и pool примитивов
5. Разница между String, StringBuilder и StringBuffer?
6. Какая максимальная длина массива?
7. Почему 0.1   0.7 != 0.8 ?
8. При сложении char   short какой результирующий тип получим?
9. Расскажи про pool строк и pool примитивов

Отличие операторов сокращенных логических операторов и полных

к вопросам в комментариях : Где находятся параметры и аргументы метода

Рзмер boolean-значенией в массиве типов boolean
Максимальная размерность многомерного массива
Теоретические вопросы для повторения:
1. Все примитивные типы и их размеры
2. Потери при неявных приведениях
3. Что такое Autoboxing,  unboxing и когда они происходят автоматически?
4. Что такое continue и break? Расширенная версия ?

1. bool2. погуглите метод .internean 32 бита, но в массиве - 1 бит.

1) Перевод 1111 в десятичную систему и обратно
2) Оператор XOR. Представить таблицу истинности для него
3) autoboxing unboxing
P.S. остальные вопросы написали в комментариях ниже

1) Какие примитивные типы есть в Java
2) Что такое явные и неявные приведения, с чем связано их наличие?
3) Какие данные мы рискуем потерять при явных приведениях?
4) StringBuilder.
5) Логические операторы.
6) char
7) Неизменяемые типы

1. Какая размерность у boolean?
2. Почему 0.1   0.7 != 0.8 ?
3. При сложении char   short какой результирующий тип получим?
4. Почему не рекомендуются множественные конкатенации String?
5. чем отличается метод от функции?
6. можно ли положить максимальное значение long во float

1. Какая размерность у boolean?
2. byte a = 1; byte b = 2; byte c = a   b; Будут ли какие-то проблемы?
3. При сложении char   short какой результирующий тип получим?
4. Как добавить String’у в pool строк?
5. Расскажи про pool строк и pool примитивов
6. чем отличается метод от функции?
7. Что такое массив и какие на нём есть ограничения?
8. Расскажи про все условные операторы?

1. Отличия for от for each
2. Потеря данных при преобразовании short/char
3. Все условные операторы
4. Инкременты, декременты, отличия.
5. Пулы строк и integer
6. чем отличается метод от функции?

1. Почему 0.1   0.7 != 0.8 ?
2. Что такое массив и какие на нём есть ограничения?
3. Какая максимальная длина массива?
4. Что такое рекурсия? Недостатки и преимущества?
5. 2 случая (правила/условия) в рекурсивном алгоритме?

1. Какая размерность у boolean?
2. Какие могут быть потери данных при явных привидениях?
3. чем отличается метод от функции?
4. 2 случая (правила/условия) в рекурсивном алгоритме?


1. Какая размерность у boolean?
2. Почему 0.1   0.7 != 0.8 ?
3. Что такое char? Почему над ним можно выполнять арифметические операции?
4. Какие могут быть потери данных при явных привидениях?
5. Double to int
6. Что такое массив и какие на нём есть ограничения?
7. Какая максимальная длина массива?
8. Расширенный break

1.String Pool
2. Integer Pool
3. Continue\ break
по этим вопросам подготовьтесь

Видео по всем темам основным. Для ревью:
Примитивные типы данных и литералы. Объявление и инициализация переменных:
https://www.youtube.com/watch?v=ZnzIpVWAPv8
Явные и неявные приведения, с чем связано их наличие?
https://www.youtube.com/watch?v=bHWDG9bfDRg
Классы-обертки примитивных типов данных
 https://www.youtube.com/watch?v=P7b_dzMFG7s
StringBuilder и StringBuffer
 https://www.youtube.com/watch?v=Vw2GPl3APD4
 https://www.youtube.com/watch?v=Om3ulOV6zgc
Форматирование строк в Java
https://www.youtube.com/watch?v=WABydTyTlFs
Рекурсия
 https://www.youtube.com/watch?v=9Hs7DuIJ3LE
String и его методы.
 https://www.youtube.com/watch?v=ERTDiGH3XUA
Пример immutable класса
 https://www.youtube.com/watch?v=2PPPW6I-C34
Многомерные массивы
 https://www.youtube.com/watch?v=17FwEtVsIMQ


Не удалось найти хорошего видео:
BigInteger и BigDecimal
https://metanit.com/java/tutorial/12.2.php
https://urvanov.ru/2015/06/23/особенности-работы-с-java-math-bigdecimal/


